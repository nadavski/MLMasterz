## Natural Language Processing## Import the librariesimport numpy as npimport matplotlib.pyplot as pltimport pandas as pdimport reimport nltk#nltk.download('stopwords')from nltk.corpus import stopwordsfrom nltk.stem.porter import PorterStemmer## Importing the datasetdataset = pd.read_csv('Restaurant_Reviews.tsv', delimiter = '\t', quoting = 3)## Cleaning the textnumber_of_lines = 1000corpus = []for i in range(0, number_of_lines):    review = re.sub('[^a-zA-Z]', ' ', dataset['Review'][i]) # tr "^a-zA-Z" " "    review = review.lower()    review = review.split()    ps = PorterStemmer()    all_stopwords = stopwords.words('english')    all_stopwords.remove('not')    review = [ps.stem(word) for word in review if not word in set(all_stopwords)]    review = ' '.join(review)    corpus.append(review)    #print(corpus)## Creating the Bag of Words modelfrom sklearn.feature_extraction.text import CountVectorizercv = CountVectorizer(max_features = 1500)x = cv.fit_transform(corpus).toarray()y = dataset.iloc[:, -1].values#len(x[0])## Splitting the dataset into the Training set and Test setfrom sklearn.model_selection import train_test_splitx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)## Training the Naive Bayes model on the Training setfrom sklearn.naive_bayes import GaussianNBclassifier = GaussianNB()classifier.fit(x_train, y_train)## Predicting the Test set resultsy_pred = classifier.predict(x_test)#print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))## Making the Confusion Matrixfrom sklearn.metrics import confusion_matrix, accuracy_scorecm = confusion_matrix(y_test, y_pred)#print(cm)#print(accuracy_score(y_test, y_pred))## Predicting if a songle review is positive or negative## Positive review#new_review = 'I love this restaurant so much'new_review = input('Review: ')new_review = re.sub('[^a-zA-Z]', ' ', new_review)new_review = new_review.lower()new_review = new_review.split()ps = PorterStemmer()all_stopwords = stopwords.words('english')all_stopwords.remove('not')new_review = [ps.stem(word) for word in new_review if not word in set(all_stopwords)]new_review = ' '.join(new_review)new_corpus = [new_review]new_X_test = cv.transform(new_corpus).toarray()new_y_pred = classifier.predict(new_X_test)print(new_y_pred)if (new_y_pred == 1):    print('Positive')else: print('Negative')